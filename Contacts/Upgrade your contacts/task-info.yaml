type: edu
custom_name: stage3
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {

            Contacts phonebook = new Contacts();

            phonebook.insertContact();
            phonebook.showContacts();
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, String... actions) {\n        if (actualSize != actions.length)\
    \ {\n            return CheckResult.wrong(String.format(\"This test should contain\
    \ %d actions: %s. \" +\n                            \"You should separate your\
    \ actions with an empty line.\",\n                    actions.length,\n      \
    \              String.join(\", \", actions)));\n        } else {\n           \
    \ return null;\n        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>>\
    \ generate() {\n        return List.of (\n            new TestCase<TestClue>()\n\
    \                .setInput(\"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"enter action\")) {\n                      \
    \  return new CheckResult(false,\n                            \"No \\\"Enter action\\\
    \" substring found in the output\");\n                    }\n                \
    \    return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"edit\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"no records to edit\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    No records to edit\\\" substring found in the output\");\n                   \
    \ }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"count\\n\" +\n                    \"remove\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" substring found in the output\");\n                    }\n                \
    \    return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.correct();\n                })),\n\n    \
    \        new TestCase<TestClue>()\n                .setInput(\n              \
    \      \"add\\n\" +\n                        \"organization\\n\" +\n         \
    \               \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"info\", \"exit\");\n                    if (feedback != null) return feedback;\n\
    \                    \n                    String infoBlock = blocks[1];\n   \
    \                 if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n\
    \                        || !infoBlock.contains(\"Address: Wall St. 1\")\n   \
    \                     || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.correct();\n                })),\n\n          \
    \  new TestCase<TestClue>()\n                .setInput(\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"edit\\n\" +\n                        \"1\\\
    n\" +\n                        \"gender\\n\" +\n                        \"M\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.correct();\n      \
    \          })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.correct();\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"person\\n\" +\n                    \
    \    \"John2\\n\" +\n                        \"Smith2\\n\" +\n               \
    \         \"\\n\" +\n                        \"\\n\" +\n                     \
    \   \"123 456 789\\n\" +\n                    \"edit\\n\" +\n                \
    \        \"1\\n\" +\n                        \"number\\n\" +\n               \
    \         \"321 654 978\\n\" +\n                    \"info\\n\" +\n          \
    \              \"1\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.correct();\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"organization\\n\" +\n                       \
    \ \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n         \
    \               \"+0 (123) 456-789-9999\\n\" +\n                    \"edit\\n\"\
    \ +\n                        \"1\\n\" +\n                        \"number\\n\"\
    \ +\n                        \"+0 (123) 456-789-12345\\n\" +\n               \
    \     \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"edit\", \"info\", \"exit\");\n                    if (feedback != null) return\
    \ feedback;\n                    \n                    String infoBlock = blocks[2];\n\
    \                    if (!infoBlock.contains(\"Organization name: Pizza Shop\"\
    )\n                        || !infoBlock.contains(\"Address: Wall St. 1\")\n \
    \                       || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.correct();\n                }))\n        );\n    }\n\
    \n    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Person {
        private String name;
        private String surname;
        private String phoneNumber;
        private final String phoneNumberRegex ="\\+?((\\(\\w+\\)([\\s-]\\w{2,})?)|(\\w+([\\s-]\\(\\w{2,}\\))?))([\\s-]\\w{2,}){0,3}";


        public Person(String name, String surname, String phoneNumber) {
            this.name = name;
            this.surname = surname;
            this.phoneNumber = phoneNumber;
        }

        public String getSurname() {
            return surname;
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public void setPhoneNumber(String phoneNumber) {

            if (checkPhoneNumber(phoneNumber) || phoneNumber.equals("+(123) (123)")){
                this.phoneNumber = phoneNumber;
            }else{
                System.out.println("Wrong number format!");
            }
        }

        private boolean checkPhoneNumber (String value) {
            Pattern pattern = Pattern.compile(this.phoneNumberRegex, Pattern.CASE_INSENSITIVE);
            Matcher match = pattern.matcher(value);
            return match.matches();
        }

        private boolean hasNumber(String value) {
            return value.matches(".*\\\\d.*");
        }

        @Override
        public String toString() {
            return name + " " + surname + ", " + phoneNumber;
        }

        public static class Builder {
            private String name = "";
            private String surname = "";
            private String phoneNumber = "[no number]";

            public Builder setName(String name) {
                this.name = name;
                return this;
            }

            public Builder setSurname(String surname) {
                this.surname = surname;
                return this;
            }

            public Builder setPhoneNumber(String phoneNumber) {
                this.phoneNumber = phoneNumber;
                return this;
            }

            public Person build() {
                return new Person(name, surname, phoneNumber);
            }

        }
    }
  learner_created: true
- name: src/contacts/Menu.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.InputMismatchException;
    import java.util.Scanner;
    import java.util.concurrent.atomic.AtomicInteger;

    public class Menu {
        private final ArrayList<Person> phoneBook;
        private Scanner scanner;

        public Menu (ArrayList<Person> phoneBook) {
            this.phoneBook = phoneBook;
            this.scanner = new Scanner(System.in);
        }

        public void mainMenu() {
            String option;

            System.out.print("Enter action (add, remove, edit, count, list, exit):");
            option = scanner.next();
            mainOptions(option);
        }

        public void mainOptions (String option) {
            switch (option.toLowerCase().trim()) {
                case "add": add();
                case "remove": remove();
                case "edit": edit();
                case "count": count();
                case "list": listMenu();
                case "exit": exit();
                default: mainMenu();
            }
        }

        public void add() {
            Person person = new Person.Builder().build();

            person.setName(enterName());
            person.setSurname(enterSurname());
            person.setPhoneNumber(enterPhoneNumber());

            this.phoneBook.add(person);
            System.out.println("The record added.");
            mainMenu();
        }

        public void listMenu() {
            if (this.phoneBook.size() > 0) {
                list();
            }else {
                System.out.println("No records found!");
            }
            mainMenu();
        }

        public void list() {
            AtomicInteger count = new AtomicInteger(1);
            this.phoneBook.forEach(person -> {
                System.out.println(count + ". " + person.toString());
                count.getAndIncrement();
            });
        }

        public void remove(){
            //Scanner scanner = new Scanner(System.in);
            if (this.phoneBook.size() > 0) {
                this.list(); // print the menu
                System.out.print("Select a record: ");
                try {
                    int record = scanner.nextInt() - 1;
                    this.phoneBook.remove(record);
                    System.out.println("The record removed!");
                } catch (InputMismatchException e){
                    System.out.println("Wrong Input Format!");
                }
            } else {
                System.out.println("No records to remove!");
            }
            mainMenu();
          }

        public void edit() {

            if (this.phoneBook.size() >0){
                this.list();
                System.out.print("Select a record: ");
                int record = scanner.nextInt() - 1;
                Person person = this.phoneBook.get(record);

                System.out.print("Select a field (name, surname, number):");
                String option = scanner.next();
                switch (option.toLowerCase().trim()) {
                    case "name":
                        person.setName(enterName());
                        break;
                    case "surname":
                        person.setSurname(enterSurname());
                        break;
                    case "number":
                        person.setPhoneNumber(enterPhoneNumber());
                        break;
                    default:
                        System.out.println("field don't exist. Want to try again (y/n): ");
                        String choice = scanner.next();
                        if (choice.toLowerCase().trim() == "y" || choice.toLowerCase().trim() == "yes"){
                            edit();
                        } else {
                            mainMenu();
                        }
                }
                this.phoneBook.set(record, person);
                System.out.println("The record updated!");

            }else{
                System.out.println("No records to edit!");
            }
            mainMenu();
        }

        public void count() {
            String output = "The record has " +
                    this.phoneBook.size() +
                    " records";
            System.out.println(output);
            mainMenu();
        }

        public String enterName() {
            System.out.print("Enter the name: ");
            return scanner.next().trim();
        }

        public String enterSurname() {
            System.out.print("Enter the surname: ");
            return scanner.next().trim();
        }

        public String enterPhoneNumber() {
            Scanner scan = new Scanner(System.in);
            System.out.print("Enter the number: ");
            return scan.nextLine();
        }

        public void exit() {
            System.exit(0);
        }
    }
  learner_created: true
- name: src/contacts/CommonInformation.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/230/implement
status: Unchecked
record: -1
